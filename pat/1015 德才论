最开始的提交时数组上限设置了10001，发现部分答案错误，扩大后，运行超时，着手改变，将cin,cout换为scanf printf，但是仍然超时，决定改变排序方法，从冒泡改为快排
然而，出现了新问题0xC00000FD: Stack overflow (参数: 0x00000000, 0x00AB2000)。
C++运行程序时出现如图错误。

原因：申请内存过大。
把大数组改成用new分配，函数返回前delete。例如double X[100][100];这个数组所占空间大约是80KB，
最好改成用new分配，如果这样的数组个数不多，不改也没关系。



1015 德才论 （25 分）
宋代史学家司马光在《资治通鉴》中有一段著名的“德才论”：“是故才德全尽谓之圣人，才德兼亡谓之愚人，德胜才谓之君子，才胜德谓之小人。凡取人之术，苟不得圣人，君子而与之，与其得小人，不若得愚人。”

现给出一批考生的德才分数，请根据司马光的理论给出录取排名。

输入格式：
输入第一行给出 3 个正整数，分别为：N（≤10
​5
​​ ），即考生总数；L（≥60），为录取最低分数线，即德分和才分均不低于 L 的考生才有资格被考虑录取；H（<100），为优先录取线——德分和才分均不低于此线的被定义为“才德全尽”，此类考生按德才总分从高到低排序；才分不到但德分到线的一类考生属于“德胜才”，也按总分排序，但排在第一类考生之后；德才分均低于 H，但是德分不低于才分的考生属于“才德兼亡”但尚有“德胜才”者，按总分排序，但排在第二类考生之后；其他达到最低线 L 的考生也按总分排序，但排在第三类考生之后。

随后 N 行，每行给出一位考生的信息，包括：准考证号 德分 才分，其中准考证号为 8 位整数，德才分为区间 [0, 100] 内的整数。数字间以空格分隔。

输出格式：
输出第一行首先给出达到最低分数线的考生人数 M，随后 M 行，每行按照输入格式输出一位考生的信息，考生按输入中说明的规则从高到低排序。当某类考生中有多人总分相同时，按其德分降序排列；若德分也并列，则按准考证号的升序输出。

输入样例：
14 60 80
10000001 64 90
10000002 90 60
10000011 85 80
10000003 85 80
10000004 80 85
10000005 82 77
10000006 83 76
10000007 90 78
10000008 75 79
10000009 59 90
10000010 88 45
10000012 80 100
10000013 90 99
10000014 66 60
输出样例：
12
10000013 90 99
10000012 80 100
10000003 85 80
10000011 85 80
10000004 80 85
10000007 90 78
10000006 83 76
10000005 82 77
10000002 90 60
10000014 66 60
10000008 75 79
10000001 64 90


#include <stdio.h>
#include <stdlib.h>    //stdlib里含有qsort()函数。
#define MAXN 100000    //考生人数最高10万。
/*考生结构体：学号、德分、才分*/
typedef struct {
	int num;
	int de;
	int cai;
} student;
/*比较函数*/
int cmp ( const void *a, const void *b ) {
    /*将指针a、b强制转换成student结构体类型*/
	student s1 = *(student *)a;
	student s2 = *(student *)b;
    /*总分降序*/
	if ( (s1.de + s1.cai) != (s2.de + s2.cai) )	return (s2.de + s2.cai) > (s1.de + s1.cai);
    /*德分降序*/
        else if ( s1.de != s2.de)	return s2.de > s1.de;
    /*学号降序*/
        else	return s1.num > s2.num; 
}
int main(void) {
	int N, L, H, i, j;
	int num, de, cai;
	int cnt[4] = {0};    //cnt[]下标对应4种分类，数组元素对应每个分类多少人。
	student a[4][MAXN];    //a[][]的行表示4种分类，列表示每种分类的第几个考生。
	
	scanf("%d %d %d", &N, &L, &H);    //总人数、低分线、高分线。
    /*将考生分为四类：德才全尽、德胜才、德才兼亡但德胜才、德才兼亡*/
	while ( N-- ) {
		scanf("%d %d %d", &num, &de, &cai);
		if ( de >= L && cai >= L ) {    //首先保证德分、才分都及格。
			student stu = {num, de, cai};    //及格了才将数据保存进结构体。
			if ( de >= H && cai >= H )	a[0][cnt[0]++] = stu;    //德才全尽。
			else if ( de >= H && cai < H )	a[1][cnt[1]++] = stu;    //德胜才。
			else if ( de < H && cai < H && de >= cai )	a[2][cnt[2]++] = stu;    //德才兼亡但德胜才。
			else	a[3][cnt[3]++] = stu;    //德才兼亡。
		}
	}
    /*输出总共多少人及格*/
	printf("%d\n", cnt[0] + cnt[1] + cnt[2] + cnt[3]);
    /*输出排序后的结果*/
	for ( i = 0; i < 4; i++ ) {
        /*快速排序：数组地址、数组元素个数、每个数组元素的大小、比较函数*/
		qsort( a[i], cnt[i], sizeof( a[0][0] ), cmp );    
		for ( j = 0; j < cnt[i]; j++ )
			printf("%d %d %d\n", a[i][j].num, a[i][j].de, a[i][j].cai);
	}
	
	return 0;
}
